<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author Brent Shaffer
 * @author Thibault Jouannic <thibault@jouannic.fr>
 */
abstract class PluginCategory extends BaseCategory
{
  public function preDelete($event)
  {
    // We must delete the CategoryObject references
    Doctrine::getTable('CategoryObject')->deleteByCategoryId($this->getId());
  }

  /**
   * Get all records of the given class who belongs to this category
   *
   * @param $class string The table of the objects we want
   *
   * @return Doctrine_Collection
   **/
  public function getObjects($class)
  {
    $q = $this->_selectObjectsJoinCategoryRawQuery($class)
      ->andWhere('co.category_id = ?', $this->getId());

    return $q->execute();
  }

  /**
   * Get all records who belongs to the subtree which current category is the root
   *
   * @param $class string The table of the objects we want
   *
   * @return Doctrine_Collection
   **/
  public function getSubtreeObjects($class)
  {
    $q = $this->_selectObjectsJoinCategoryRawQuery($class)
      ->addFrom('INNER JOIN category c ON co.category_id = c.id')
      ->andWhere('c.lft >= ?', $this->getLft())
      ->andWhere('c.rgt <= ?', $this->getRgt())
      ->addComponent('o', $class);

    return $q->execute();
  }

  /**
   * Helper method to generate a join query
   *
   * @param $class string The table of the objects we want
   *
   * @retun Doctrine_RawSql
   **/
  protected function _selectObjectsJoinCategoryRawQuery($class)
  {
    $q = new Doctrine_RawSql();
    $q->select('{o.*}')
      ->from(Doctrine_Inflector::tableize($class) . ' o')
      ->addFrom('INNER JOIN category_object co ON o.id = co.categorized_id')
      ->addWhere('co.categorized_model = ?', $class)
      ->addComponent('o', $class);

    return $q;
  }

  // From this line, all this code comes from the old version

  public function getSubCategories()
  {
    return $this->getNode()->getDescendants();
  }

  public function setSubCategory($category)
  {
    if(is_string($category))
    {
      $category = $this->getTable()->getOrCreateCategory($category);
    }
    elseif($category instanceof Category)
    {
      //Do Nothing, category is good.
    }
    else
    {
      throw new sfException("Parameters passed to setSubCategory must be an instance of Category or type string");
    }
    if($category->getNode()->getLevel())
    {
      //Category exists in DB, move it to the new location
      $category->getNode()->moveAsLastChildOf($this);
    }
    else
    {
      $this->getNode()->addChild($category);
    }
    $this->refresh();
  }

  public function getParentId()
  {
    if (!$this->getNode()->isValidNode() || $this->getNode()->isRoot())
    {
      return null;
    }

    $parent = $this->getNode()->getParent();

    return $parent['id'];
  }

  public function getIndentedName()
  {
    return str_repeat('- ',$this['level']).$this['name'];
  }

  public function getParentCategory()
  {
    $parent = $this->getNode()->getParent();
    return $parent == null || $parent->getNode()->isRoot() ? null : $parent;
  }

  public function setParentCategory($category)
  {
    $category = $this->getTable()->getCategory($category);
    if($this->getNode()->getLevel())
    {
      //This category already exists in DB, move it to the new location
      $this->getNode()->moveAsLastChildOf($category);
    }
    else
    {
      $category->getNode()->addChild($this);
    }

    $this->refresh();
  }

  public function secureSave()
  {
    if(!$this->getInvoker()->getNode()->getRootValue() && !$this->getInvoker()->getTable()->getTree()->findRoot($this->getInvoker()->getId()))
    {
      throw new sfException('Categories must be attached to a specific object tree.  use the "addCategory" method called form your object.');
    }
    $ret = $this->save();
    $this->refresh();
    return $ret;
  }
}
